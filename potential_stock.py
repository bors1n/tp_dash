import streamlit as st
import pandas as pd
import plotly.graph_objects as go

st.set_page_config(layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    rrc_table = pd.read_csv('rrc_table.csv').dropna()
    tp_stock = pd.read_csv('tp_stock.csv').dropna()
    return rrc_table, tp_stock

rrc_table, tp_stock = load_data()

st.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: –†–†–¶ vs –¢–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç—ã")

# --- –°–ê–ô–î–ë–ê–†: –§–ò–õ–¨–¢–†–´ ---
st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä—ã")

# –†–†–¶ –∏ –¥–∏–≤–∏–∑–∏–æ–Ω
selected_div = st.sidebar.multiselect("–î–∏–≤–∏–∑–∏–æ–Ω", sorted(rrc_table['div'].unique()))
selected_rrc = st.sidebar.multiselect("–†–†–¶ (–°–∫–ª–∞–¥)", sorted(rrc_table['rrc_name'].unique()))

# –°—Ç–∞—Ç—É—Å—ã
federal_status_filter = st.sidebar.multiselect(
    "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", sorted(rrc_table['federal_status_name'].unique()))
life_cycle_filter = st.sidebar.multiselect(
    "–°—Ç–∞—Ç—É—Å –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞", sorted(rrc_table['life_cycle_status_name'].unique()))
purchase_status_filter = st.sidebar.multiselect(
    "–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∞", sorted(rrc_table['purchase_status_name'].unique()))
top_category_filter = st.sidebar.multiselect(
    "–¢–æ–ø–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", options=[True, False], format_func=lambda x: "–¢–æ–ø" if x else "–ù–µ —Ç–æ–ø")
access_only = st.sidebar.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫", value=False)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (drill-down)
category1_filter = st.sidebar.multiselect(
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1 —É—Ä–æ–≤–Ω—è", sorted(rrc_table['category_1_name'].unique()))
category4_filter = st.sidebar.multiselect(
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4 —É—Ä–æ–≤–Ω—è", sorted(rrc_table['category_4_name'].unique()))

# --- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• ---
df_filtered = rrc_table.copy()

if selected_div:
    df_filtered = df_filtered[df_filtered['div'].isin(selected_div)]

if selected_rrc:
    df_filtered = df_filtered[df_filtered['rrc_name'].isin(selected_rrc)]

if federal_status_filter:
    df_filtered = df_filtered[df_filtered['federal_status_name'].isin(federal_status_filter)]

if life_cycle_filter:
    df_filtered = df_filtered[df_filtered['life_cycle_status_name'].isin(life_cycle_filter)]

if purchase_status_filter:
    df_filtered = df_filtered[df_filtered['purchase_status_name'].isin(purchase_status_filter)]

if top_category_filter:
    df_filtered = df_filtered[df_filtered['top_category'].isin(top_category_filter)]

if category1_filter:
    df_filtered = df_filtered[df_filtered['category_1_name'].isin(category1_filter)]

if category4_filter:
    df_filtered = df_filtered[df_filtered['category_4_name'].isin(category4_filter)]

if access_only:
    df_filtered = df_filtered[df_filtered['access'] == True]

# --- –ê–ì–†–ï–ì–ê–¶–ò–Ø –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ì–†–ê–§–ò–ö–ê ---

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –†–†–¶ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
rrc_agg = (
    df_filtered.groupby(['rrc_id', 'rrc_name', 'access'], as_index=False)
    .agg({'product_count': 'sum'})
)

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –¢–ü
tp_agg = (
    tp_stock.groupby(['rrc_id', 'branch'], as_index=False)
    .agg({'product_count_tp': 'sum'})
    .query('product_count_tp > 1000')
)

# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –†–†–¶ –≤ tp_agg
rrc_names = df_filtered[['rrc_id', 'rrc_name']].drop_duplicates()
tp_agg = tp_agg.merge(rrc_names, on='rrc_id', how='left')

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –†–†–¶
rrc_order = rrc_names['rrc_name'].unique()

# –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Å–∏ X (–†–†–¶ –∏ –∏—Ö —Ç–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç—ã)
x_categories = []
for rrc in rrc_order:
    x_categories.append(rrc)
    tps = tp_agg[tp_agg['rrc_name'] == rrc]['branch'].unique()
    for tp in tps:
        x_categories.append(f"{rrc} - {tp}")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è stacked bar –ø–æ –†–†–¶
y_accessible = []
y_inaccessible = []
for rrc in rrc_order:
    row_accessible = rrc_agg[(rrc_agg['rrc_name'] == rrc) & (rrc_agg['access'] == True)]
    row_inaccessible = rrc_agg[(rrc_agg['rrc_name'] == rrc) & (rrc_agg['access'] == False)]
    y_accessible.append(row_accessible['product_count'].values[0] if not row_accessible.empty else 0)
    y_inaccessible.append(row_inaccessible['product_count'].values[0] if not row_inaccessible.empty else 0)

# --- –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ò–ö–ê ---
fig = go.Figure()

# –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π (—Å–µ—Ä—ã–π)
fig.add_trace(go.Bar(
    x=rrc_order,
    y=y_inaccessible,
    name='–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π',
    marker_color='#bdbdbd',
    text=[str(val) for val in y_inaccessible],
    textposition='inside',
    textfont_color='black',
))

# –î–æ—Å—Ç—É–ø–Ω—ã–π (–∑–µ–ª—ë–Ω—ã–π)
fig.add_trace(go.Bar(
    x=rrc_order,
    y=y_accessible,
    name='–î–æ—Å—Ç—É–ø–Ω—ã–π',
    marker_color='#a6d854',
    text=[str(val) for val in y_accessible],
    textposition='inside',
    textfont_color='black',
))

# –ë–∞—Ä—ã –¥–ª—è —Ç–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç–æ–≤ (—Å–∏–Ω–∏–π)
for rrc in rrc_order:
    tps = tp_agg[tp_agg['rrc_name'] == rrc]
    for _, row in tps.iterrows():
        fig.add_trace(go.Bar(
            x=[f"{rrc} - {row['branch']}"],
            y=[row['product_count_tp']],
            name='–û—Å—Ç–∞—Ç–æ–∫ –¢–ü',
            marker_color='#377eb8',
            text=[str(row['product_count_tp'])],
            textposition='outside',
            textfont_color='black',
            showlegend=False,
        ))

# –ü–æ–¥–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É –¥–ª—è —Å—É–º–º –ø–æ –†–†–¶
for i, rrc in enumerate(rrc_order):
    total = y_accessible[i] + y_inaccessible[i]
    fig.add_annotation(
        x=rrc,
        y=total + max(total*0.05, 1),
        text=f"<b>–í—Å–µ–≥–æ: {total} </b>",
        showarrow=False,
        font=dict(size=10, color='black')
    )

fig.update_layout(
    barmode='stack',
    xaxis=dict(
        title='–†–†–¶ –∏ –¢–µ—Ö–Ω–æ–ø–æ–∏–Ω—Ç—ã',
        categoryorder='array',
        categoryarray=x_categories,
        tickangle=-45
    ),
    yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
    legend_title_text='–¢–∏–ø –æ—Å—Ç–∞—Ç–∫–æ–≤',
    title='      –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶ –∏ –¢–ü',
    uniformtext_minsize=8,
    uniformtext_mode='hide'
)

# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ª–µ–≥–µ–Ω–¥—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –º–µ—Ç–∫—É ¬´–û—Å—Ç–∞—Ç–æ–∫ –¢–ü¬ª
legend_names_shown = set()
for trace in fig.data:
    if trace.name == '–û—Å—Ç–∞—Ç–æ–∫ –¢–ü':
        if '–û—Å—Ç–∞—Ç–æ–∫ –¢–ü' in legend_names_shown:
            trace.showlegend = False
        else:
            trace.showlegend = True
            legend_names_shown.add('–û—Å—Ç–∞—Ç–æ–∫ –¢–ü')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
st.plotly_chart(fig, use_container_width=True)


# --- –¢–ê–ë–õ–ò–¶–ê ---
st.write("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
df_cross = (df_filtered.pivot_table(
    index=['rrc_id', 'rrc_name'],
    columns='access',
    values='product_count',
    aggfunc='sum',
    fill_value=0)
    .reset_index()
)
df_cross.columns.name = None
df_cross = df_cross.rename(columns={False: '–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶', True: '–î–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶'})
absolute_numbers = df_cross.merge(tp_agg, on=['rrc_id', 'rrc_name'], how='left')[['rrc_name', 'branch', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶', '–î–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶', 'product_count_tp']]
absolute_numbers['–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –†–†–¶'] = absolute_numbers['–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶'] + absolute_numbers['–î–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶']
absolute_numbers = absolute_numbers.rename(columns={'rrc_name': '–†–†–¶', 'branch': '–¢–ü', 'product_count_tp': '–û—Å—Ç–∞—Ç–æ–∫ –¢–ü'})
absolute_numbers = absolute_numbers[['–†–†–¶', '–¢–ü', '–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –†–†–¶', '–î–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –û—Å—Ç–∞—Ç–æ–∫ –†–†–¶', '–û—Å—Ç–∞—Ç–æ–∫ –¢–ü']]
st.dataframe(absolute_numbers)